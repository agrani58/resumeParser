import streamlit as st
import time
import secrets
import re
from datetime import datetime, timedelta, timezone
import stripe
from dotenv import load_dotenv
import os
from app.schema import create_checkout_session
from app.config import cookie_controller
from app.schema import (
    create_connection, create_session_token, create_user, delete_session_token, 
    update_user_subscription, verify_user, save_resume_analysis
)
from app.components import components
from app.view import display_footer
from app.home import clear_user_files

# Load environment variables
load_dotenv()

# Initialize Stripe
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")

def is_valid_email(email):
    return re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email)

def is_password_strong(password):
    return len(password) >= 3 and any(c in "!@#$%^&*()-_" for c in password)

def check_session():
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
    session_token = cookie_controller.get("session_token")
    if not session_token:
        st.session_state.authenticated = False
        return False
    try:
        with create_connection() as conn, conn.cursor() as cursor:
            cursor.execute("""
                SELECT u.email, u.username, u.role_id, u.signup_date, 
                       COALESCE(sub.subscription_type, 'free') AS subscription_type
                FROM user_sessions s
                JOIN users u ON s.email = u.email
                LEFT JOIN subscriptions sub 
                  ON u.email = sub.email AND sub.is_active = TRUE
                WHERE s.session_token = %s AND s.expires_at > UTC_TIMESTAMP()
            """, (session_token,))
            if session := cursor.fetchone():
                st.session_state.update({
                    'authenticated': True,
                    'email': session[0],
                    'username': session[1],
                    'role_id': session[2],
                    'signup_date': session[3],
                    'subscription_type': session[4]
                })
                return True
    except Exception as e:
        st.error(f"Session error: {e}")
    return False

def login(email, password):
    verification = verify_user(email, password)
    if not verification or not verification.get('status'):
        return st.error("Login failed. Check your credentials.")
    
    session_token = secrets.token_urlsafe(32)
    expires_at = datetime.now(timezone.utc) + timedelta(days=7)
    
    if create_session_token(email, session_token, expires_at):
        cookie_controller.set("session_token", session_token,
            max_age=int((expires_at - datetime.now(timezone.utc)).total_seconds()))
        st.session_state.update({
            'authenticated': True,
            'email': email,
            'username': verification.get('username', 'User'),
            'subscription_type': verification.get('subscription_type', 'free')
        })
        st.success("Logged in successfully!")
        time.sleep(0.5)
        st.rerun()
    else:
        st.error("Failed to create session. Please try again.")

def create_checkout_session():
    try:
        checkout_session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price': 'price_1QqzjsD1iUPBafNcjG7nN4pM',
                'quantity': 1,
            }],
            mode='subscription',
            success_url=os.getenv("BASE_URL") + "?payment_status=success",
            cancel_url=os.getenv("BASE_URL") + "?payment_status=cancel",
            customer_email=st.session_state.email,
        )
        return checkout_session.url
    except Exception as e:
        st.error(f"Error creating checkout session: {e}")
        return None

def logout():
    clear_user_files()
    if session_token := cookie_controller.get("session_token"):
        delete_session_token(session_token)
        cookie_controller.set("session_token", "", max_age=0)
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.session_state.authenticated = False
    st.rerun()

def run():
    components()
    query_params = st.query_params
    if query_params.get("payment_status") == "success":
        if update_user_subscription(st.session_state.email, 'premium'):
            st.session_state.subscription_type = 'premium'
            st.success("Payment successful! You are now a premium member.")
            st.query_params.clear()

    st.session_state.setdefault('authenticated', False)
    st.session_state.setdefault('form_choice', 'Login')
    st.session_state.setdefault('username', None)
    st.session_state.setdefault('subscription_type', 'free')

    check_session()

    if st.session_state.authenticated:
        st.subheader(f"Welcome {st.session_state.username}!")
        st.divider()
        
        signup_date = st.session_state.get('signup_date')
        trial_end = None
        trial_active = False
        
        if signup_date:
            trial_end = signup_date.replace(tzinfo=timezone.utc) + timedelta(days=7)
            trial_active = datetime.now(timezone.utc) <= trial_end

        if st.session_state.subscription_type == 'free':
            if trial_active:
                st.markdown(f"""<h5 style="color: #109B12FF;">Free Trial ends on {trial_end.strftime('%Y-%m-%d')}</h5>""", 
                          unsafe_allow_html=True)
            else:
                st.markdown("""<h5 style="color: #9B1910FF;">Free Plan</h5>""", unsafe_allow_html=True)
            
            if st.button("✨ Upgrade to Premium Plan", type="primary"):
                checkout_url = create_checkout_session()
                if checkout_url:
                    st.write(f"Please complete your payment [here]({checkout_url}).")
        else:
            st.markdown("""<h5 style="color: #109B12FF;">Premium Member</h5>""", 
                      unsafe_allow_html=True)
            st.write("Enjoy unlimited uploads and premium features!")
    else:
        col1, col2, col3, col4, col5 = st.columns([1, 1.3, 1.3, 1.1, 1])
        with col3:
            with st.form(key="auth_form_accounts"):
                st.markdown(f"<h3 class='fancy-header'>{st.session_state.form_choice}</h3>", unsafe_allow_html=True)
                if st.session_state.form_choice == "Login":
                    email = st.text_input('Email', key="login_email_accounts")
                    password = st.text_input('Password', type='password', key="login_password_accounts")
                    col1a, col2a = st.columns([1, 1])
                    with col1a:
                        if st.form_submit_button("Login"):
                            if not all([email, password]):
                                st.error("Please fill in all fields.")
                            elif not is_valid_email(email):
                                st.error("Invalid email format.")
                            else:
                                login(email, password)
                    with col2a:
                        if st.form_submit_button("Sign Up"):
                            st.session_state.form_choice = "Sign Up"
                            st.rerun()
                else:
                    email = st.text_input('Email', key="signup_email_accounts")
                    username = st.text_input('User Name', key="signup_username_accounts")
                    password = st.text_input('Password', type='password', key="signup_password_accounts")
                    confirm_password = st.text_input('Confirm Password', type='password', key="signup_confirm_password_accounts")
                    col1b, col2b = st.columns([1, 1])
                    with col1b:
                        if st.form_submit_button("Create Account"):
                            if not all([email, username, password, confirm_password]):
                                st.error("Please fill in all fields.")
                            elif password != confirm_password:
                                st.error("Passwords do not match.")
                            elif not is_password_strong(password):
                                st.error("Password must be at least 8 characters with special characters.")
                            elif create_user(email, username, password):
                                st.success("Account created! Please login.")
                                st.session_state.form_choice = "Login"
                                st.rerun()
                    with col2b:
                        if st.form_submit_button("Back to Login"):
                            st.session_state.form_choice = "Login"
                            st.rerun()
    display_footer()

if __name__ == "__main__":
    run()



    
# admin.py
import pandas as pd
import streamlit as st
import plotly.express as px
from datetime import datetime
from .accounts import logout
from app.schema import create_connection
from app.view import display_footer
from app.components import main_components


def is_admin():
    if not st.session_state.get('authenticated'):
        return False
    try:
        with create_connection() as conn, conn.cursor() as cursor:
            cursor.execute("""
                SELECT role_id FROM users 
                WHERE email = %s""", (st.session_state.email,))
            result = cursor.fetchone()
            return result and result[0] == 2
    except Exception as e:
        st.error(f"Admin check error: {e}")
        return False


def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)


@st.cache_data(ttl=60)  # Refresh data every 60 seconds
def get_resume_data(for_analytics=False, for_skills=False, for_subscriptions=False):
    try:
        with create_connection() as conn, conn.cursor() as cursor:
            if for_skills:
                # Query to get skill distribution
                query = """
                    SELECT s.skill_name, COUNT(asl.skill_id) AS skill_count
                    FROM skills s
                    JOIN analysis_skills asl ON s.skill_id = asl.skill_id
                    GROUP BY s.skill_name
                    ORDER BY skill_count DESC
                """
            elif for_subscriptions:
                # Query to get subscription distribution
                query = """
                    SELECT subscription_type, COUNT(*) AS user_count
                    FROM users
                    GROUP BY subscription_type
                """
            elif for_analytics:
                # Existing analytics query
                query = """
                    SELECT 
                        ra.uploaded_at AS timestamp,
                        ra.applied_profile AS Applied_for_Profile,
                        ra.professional_experience AS Professional_Experience_in_Years,
                        ra.linkedin,
                        ra.github,
                        MAX(CASE WHEN pn.phone_number IS NOT NULL THEN 1 ELSE 0 END) AS has_phone
                    FROM resume_analysis ra
                    LEFT JOIN phone_numbers pn ON ra.analysis_id = pn.analysis_id
                    GROUP BY ra.analysis_id, ra.uploaded_at, ra.applied_profile, 
                            ra.professional_experience, ra.linkedin, ra.github
                """
            else:
                # Existing query for resume data
                query = """
                    SELECT 
                        ra.uploaded_at AS timestamp,
                        ra.name AS Name,
                        ra.parsed_email AS Email,
                        GROUP_CONCAT(DISTINCT pn.phone_number) AS Phone_1,
                        GROUP_CONCAT(DISTINCT ad.address) AS Address,
                        ra.highest_education AS Highest_Education,
                        ra.applied_profile AS Applied_for_Profile,
                        ra.professional_experience AS Professional_Experience_in_Years,
                        ra.linkedin AS LinkedIn,
                        ra.github AS GitHub,
                        GROUP_CONCAT(DISTINCT s.skill_name) AS Skills  -- Added Skills column
                    FROM resume_analysis ra
                    LEFT JOIN phone_numbers pn ON ra.analysis_id = pn.analysis_id
                    LEFT JOIN addresses ad ON ra.analysis_id = ad.analysis_id
                    LEFT JOIN analysis_skills a_sk ON ra.analysis_id = a_sk.analysis_id  -- Join with skills
                    LEFT JOIN skills s ON a_sk.skill_id = s.skill_id
                    GROUP BY ra.analysis_id, ra.uploaded_at, ra.name, ra.parsed_email, 
                    ra.applied_profile, ra.resume_score, ra.highest_education
                    LIMIT 100
                """

            cursor.execute(query)
            columns = [desc[0] for desc in cursor.description]
            data = cursor.fetchall()
            return pd.DataFrame(data, columns=columns)

    except Exception as e:
        st.error(f"Database error: {e}")
        return pd.DataFrame()


def run():
    # if not is_admin():
    #     st.error("Unauthorized access. Admins only.")
    #     st.stop()
    main_components()

    col1, col2 = st.columns([13, 1])
    with col1:
        st.markdown(f"""<h3 style="color: #1d3557;">Welcome {st.session_state.username}!</h3>""", unsafe_allow_html=True)

    with col2:
        if st.button(" Log Out", key="logout_btn"):
            logout()

    st.markdown("""
        <div style="text-align:center; margin-bottom: -2rem; margin-top: -1.5rem;">
            <h4 style="color: #1d3557; font-weight: bold;">📊 Admin Dashboard</h4>
        </div>
    """, unsafe_allow_html=True)

    # Get data and apply live filtering
    df = get_resume_data()

    if not df.empty:
        # Sort skills within each cell using quicksort
        if 'Skills' in df.columns:
            df['Skills'] = df['Skills'].apply(lambda x: ', '.join(quicksort(x.split(', '))) if pd.notna(x) else '')

        # Sort DataFrame by 'Applied_for_Profile'
        df = df.sort_values(by='Applied_for_Profile')

        col1, col2, col3 = st.columns([3, 5, 3])
        with col2:
            search_query = st.text_input("Search 🔍", placeholder="Search by name, skill, or profile")

        if search_query:
            search_lower = search_query.lower()
            # Create a mask that checks all relevant columns
            mask = (
                df['Name'].str.lower().str.contains(search_lower, na=False) |
                df['Applied_for_Profile'].str.lower().str.contains(search_lower, na=False) |
                df['Skills'].str.lower().str.contains(search_lower, na=False)
            )
            df = df[mask]

        column_order = [
            "timestamp",
            "Name",
            "Email",
            "Phone_1",
            "Address",
            "Highest_Education",
            "Applied_for_Profile",
            "Skills",  # Added Skills column
            "Professional_Experience_in_Years",
            "LinkedIn",
            "GitHub"
        ]

        df = df[column_order]
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['LinkedIn'] = df['LinkedIn'].apply(lambda x: x if x.startswith('http') else f'https://{x}')
        df['GitHub'] = df['GitHub'].apply(lambda x: x if x.startswith('http') else f'https://{x}')

        with st.container():
            col1, col2, col3 = st.columns([1, 6, 1])
            with col2:
                st.data_editor(
                    df,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "LinkedIn": st.column_config.LinkColumn(
                            "LinkedIn",
                            validate=None,
                            max_chars=40
                        ),
                        "GitHub": st.column_config.LinkColumn(
                            "GitHub",
                            validate=None,
                            max_chars=40
                        ),
                        "timestamp": st.column_config.DatetimeColumn(
                            "Upload Time",
                            format="YYYY-MM-DD HH:mm"
                        ),
                        "Professional_Experience_in_Years": st.column_config.NumberColumn(
                            "Experience (Years)",
                            format="%.1f"
                        )
                    },
                    height=500,
                    key="data_editor",
                    disabled=True
                )   

    else:
        st.info("No resume data found matching your criteria.")
#========================================================================================================================
#=======================================================================================================================
    st.markdown("---")

    st.markdown('''<div style='text-align: center; margin-bottom: -1rem;'><h3 style='color: #1d3557;'> Analytics Overview 📈 </h3></div>''', 
                    unsafe_allow_html=True)

#======================================================================================================
    col1, col2 = st.columns(2)
    with col1:
        df_analytics = get_resume_data(for_analytics=True)
        if not df_analytics.empty:
            # 1. Simplified Pie Chart
            st.markdown('''<div style='text-align: center;margin-left:-2rem; margin-top: 1rem;'><h5 style='color: #1d3557;'> Resume Trends: Popular Job Targets </h5></div>''', 
                        unsafe_allow_html=True)
            profile_counts = df_analytics['Applied_for_Profile'].value_counts().reset_index()
            profile_counts.columns = ['Profile', 'Count']

        # Create the pie chart
        fig = px.pie(
            profile_counts,
            names='Profile',  # Column for pie slice labels
            values='Count',   # Column for pie slice sizes
            hover_data=['Count'],  # Additional data to show on hover
            
        )
        
        # Customize hover template and layout
        fig.update_traces(
            hovertemplate="<b>%{label}</b><br>Applications: %{value}<br>",
            textinfo='percent+label',  # Display percentage and label
        )

        # Adjust layout
        fig.update_layout(
            paper_bgcolor="rgba(255,255,255,0.5)",
            plot_bgcolor='white',
            showlegend=True,  # Hide legend
            height=400,  # Set chart height
            margin=dict(t=30, b=10)  # Reduce margins
        )

        st.plotly_chart(fig, use_container_width=False)
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # Customize hover template and layout
    with col2:
        df_subscriptions = get_resume_data(for_subscriptions=True)
        if not df_subscriptions.empty:
            st.markdown('''<div style='text-align: center;margin-left:-2rem; margin-top: 1rem;'><h5 style='color: #1d3557;'> Subscription Distribution </h5></div>''', 
                        unsafe_allow_html=True)
            fig_subscriptions = px.pie(
                df_subscriptions,
                names='subscription_type',
                values='user_count',
                hover_data=['user_count'],
            )
            fig_subscriptions.update_traces(
                hovertemplate="<b>%{label}</b><br>Users: %{value}<br>",
                textinfo='percent+label'
            )
        # Adjust layout
            fig_subscriptions.update_layout(
                paper_bgcolor="rgba(255,255,255,0.5)",
                plot_bgcolor="rgba(255,255,255,0.5)",
                showlegend=True,
                height=400,
                margin=dict(t=30, b=10)
            )
            st.plotly_chart(fig_subscriptions, use_container_width=True)
    
#======================================================================================================
    st.markdown("---")
    with st.container():
        df_analytics = get_resume_data(for_analytics=True)
        
    col1, col2, col3 = st.columns([5, 1,5])
    with col1:
        st.markdown('''<div style='text-align: center; margin-bottom: -1rem;'><h4 style='color: #1d3557;'> Presence on Essential Platforms </h4></div>''', 
                    unsafe_allow_html=True)


        if not df_analytics.empty:
            # Calculate metrics
            total_users = len(df_analytics)
            linkedin_users = df_analytics['linkedin'].apply(lambda x: x not in ['', 'N/A', 'nan']).sum()
            github_users = df_analytics['github'].apply(lambda x: x not in ['', 'N/A', 'nan']).sum()
            
            # Create comparison data
            comparison_data = pd.DataFrame({
                'Category': ['LinkedIn', 'GitHub'],
                'Total Users': [total_users, total_users],
                'Platform Users': [linkedin_users, github_users]
            })

            # Create melted dataframe for plotting
            plot_data = comparison_data.melt(
                id_vars='Category', 
                value_vars=['Total Users', 'Platform Users'],
                var_name='Metric',
                value_name='Count'
            )

            # Create grouped bar chart
            fig = px.bar(
                plot_data,
                x='Category',
                y='Count',
                color='Metric',
                barmode='group',
                color_discrete_map={
                    'Total Users': '#1f77b4',  # Navy blue
                    'Platform Users': '#2ca02c'  # Green
                },
                template='plotly_white'
            )

            # Add styling
            fig.update_layout(
                xaxis_title="Platform",
                yaxis_title="User Count",
                showlegend=True,
                height=450,
                margin=dict(t=30, b=10),
                paper_bgcolor="rgba(255,255,255,0.6)",
                plot_bgcolor="rgba(255,255,255,0.6)",
                xaxis={'categoryorder':'array', 'categoryarray':['LinkedIn', 'GitHub']}
            )

            st.plotly_chart(fig, use_container_width=True,key="Platform_used")
            
    with col3:
        st.markdown('''<div style='text-align: center; margin-bottom: -1rem;'><h4 style='color: #1d3557;'> Professional Experience in Years</h4></div>''', 
                    unsafe_allow_html=True) 
        # Clean the experience data
        df_analytics['Professional_Experience_in_Years'] = pd.to_numeric(
            df_analytics['Professional_Experience_in_Years'], 
            errors='coerce'
        ).fillna(0)

        # Prepare experience data
        exp_data = df_analytics['Professional_Experience_in_Years'].value_counts().sort_index().reset_index()
        exp_data.columns = ['Years_of_Experience', 'Count']
        
        # Create Plotly line chart
        fig = px.line(
            exp_data,  # Your cleaned DataFrame
            x='Years_of_Experience',  # X-axis column
            y='Count',  # Y-axis column
            markers=True  # Show markers on the line
        )
        
        # Add average experience line
        avg_exp = df_analytics['Professional_Experience_in_Years'].mean()
        fig.add_shape(
            type="line",
            x0=avg_exp, y0=0,
            x1=avg_exp, y1=max(exp_data['Count']),
            line=dict(color="Red", width=2, dash="dash")
        )
        fig.add_annotation(
            x=avg_exp, y=max(exp_data['Count']),
            text=f'Average: {avg_exp:.1f} years',

        )
        
        st.plotly_chart(fig, use_container_width=True,Key="Professional_experience")
    display_footer()