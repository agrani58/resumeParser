import mysql.connector
import streamlit as st
import streamlit_authenticator as stauth  # Explicit import
import bcrypt

def create_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="root",
        database="resume_parser"
    )

# Add these new functions
def create_session_token(email, token, expires_at):
    conn = create_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            INSERT INTO user_sessions (session_token, email, expires_at)
            VALUES (%s, %s, %s)
        """, (token, email, expires_at))
        conn.commit()
        return True
    except mysql.connector.Error as err:
        print(f"Error creating session token: {err}")
        return False
    finally:
        cursor.close()
        conn.close()

def get_user_from_session_token(token):
    conn = create_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT email, expires_at FROM user_sessions
            WHERE session_token = %s AND expires_at > NOW()
        """, (token,))
        session = cursor.fetchone()  # Fetches a single tuple
        return session[0] if session else None  # Access email by index
    except mysql.connector.Error as err:
        print(f"Error retrieving session token: {err}")
        return None
    finally:
        cursor.close()
        conn.close()

def delete_session_token(token):
    conn = create_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM user_sessions WHERE session_token = %s", (token,))
        conn.commit()
    except mysql.connector.Error as err:
        print(f"Error deleting session token: {err}")
    finally:
        cursor.close()
        conn.close()

def create_user(email, username, password):
    """Create a new user with default role_id=1 (user)"""
    try:
        conn = create_connection()
        cursor = conn.cursor()
        
        # Hash password with bcrypt
        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(password.encode(), salt).decode()
        
        # Insert user into database
        cursor.execute("""
            INSERT INTO users (email, username, password, role_id) VALUES (%s, %s, %s, 1)""", (email, username, hashed_password))
        
        conn.commit()
        return True
    except mysql.connector.Error as err:
        return False
    finally:
        cursor.close()
        conn.close()

def verify_user(email, password):
    """Verify user credentials"""
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT email, password, role_id FROM users WHERE email = %s""", (email,))
        user = cursor.fetchone()  # Fetches a single tuple
        
        if not user:
            st.error("Email not found. Please check your email or sign up.")
            return {'status': False, 'role_id': None}
        
        if bcrypt.checkpw(password.encode(), user[1].encode()):  # Use tuple index to access password
            return {'status': True, 'role_id': user[2]}  # Use tuple index to access role_id
        else:
            st.error("Incorrect password. Please try again.")
            return {'status': False, 'role_id': None}
    except mysql.connector.Error as err:
        st.error(f"Database error: {err}")
        return {'status': False, 'role_id': None}
    finally:
        cursor.close()
        conn.close()

thsi ismy connection.py
import streamlit as st
import re
from components import components
from connection import create_connection, create_session_token, get_user_from_session_token, verify_user, create_user
import extra_streamlit_components as stx
from datetime import datetime, timedelta
import secrets


#helper functions---------------------
def is_valid_email(email):
    """Validate the email format using regex"""
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(email_regex, email) is not None

def is_password_strong(password):
    """Check if password meets strength requirements"""
    return (
        len(password) >= 8 and
        any(char.isdigit() for char in password) and
        any(char.isalpha() for char in password) and
        any(char in "!@#$%^&*()-_" for char in password)
    )
#helper functions ENDS---------------------
def run():
    components()
    cookie_manager = stx.CookieManager()
    session_token = cookie_manager.get('session_token')
    if not st.session_state.get('authenticated') and session_token:
        email = get_user_from_session_token(session_token)
        if email:
            conn = create_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT role_id FROM users WHERE email = %s", (email,))
            user = cursor.fetchone()  # Fetches as a tuple
            if user:
                st.session_state.authenticated = True
                st.session_state.role_id = user[0]  # Access role_id from tuple
                st.rerun()
    if 'choice' not in st.session_state:
        st.session_state.choice = 'Login'

    if not st.session_state.get('authenticated'):
        col1, col2, col3 = st.columns([1, 2, 1])  # Centered layout

        with col2:  # Center the form
            # Single CSS Block for Header & Buttons
            st.markdown("""
                <style>
                    /* Fancy Header */
                    .fancy-header {
                        text-align: center;
                        font-size: 26px;
                        color: #6A99D5FF
                    }

                    /* Button Styles */
                    div.stButton > button {
                        width: 100%;
                        font-size: 16px;
                        border-radius: 10px;
                        transition: 0.3s ease;
                        background: #6A99D5FF;  /* Default Background Color */
                        color: black;  /* Default Text Color */
                    }

                    /* Button Hover and Active States */
                    div.stButton > button:hover {
                        background:#CFEBFDFF;  /* Darker Hover Background */
                    }

                    div.stButton > button:active {
                        background:#CFEBFDFF;
                        color: white;  /* Change text color when button is clicked */
                    }

                    /* Input Text Box Styles */
                    .stTextInput input {
                        background-color: #F5E6E6FF;  /* Background Color for Input */
                    }
                </style>
            """, unsafe_allow_html=True)

            # Fancy Header
            st.markdown(f"<h3 class='fancy-header'>{st.session_state.choice}</h3>", unsafe_allow_html=True)

            if st.session_state.choice == "Login":
                email = st.text_input("Email",  placeholder="Enter your email")
                password = st.text_input("Password", type="password", placeholder="Enter your password")
                remember_me = st.checkbox("Remember Me")
                # In accounts.py, within the Login button section
                if st.button("Login"):
                    if not email or not password:
                        st.error("Please fill in all required fields")
                    elif not is_valid_email(email):
                        st.error("Please enter a valid email address")
                    else:
                        verification = verify_user(email, password)
                        if verification['status']:
                            st.session_state.authenticated = True
                            st.session_state.role_id = verification['role_id']
                            if remember_me:
                                token = secrets.token_urlsafe(32)
                                expires_at = datetime.now() + timedelta(days=30)
                                if create_session_token(email, token, expires_at):
                                    cookie_manager.set('session_token', token, expires_at=expires_at)
                            st.rerun()  # Only rerun on successful login

                if st.button("Don't have an account?"):
                        st.session_state.choice = 'Sign Up'
                        st.rerun()

            else:  # Sign Up Form
                email = st.text_input("Email",  placeholder="Enter your email")
                username = st.text_input("User Name", placeholder="Enter your name")
                password = st.text_input("Password", type='password', placeholder="Create a strong password")
                confirm_password = st.text_input("Confirm Password", type='password', placeholder="Re-enter password")

                if st.button("Create Account"):
                    error = None

                    if not all([email, username, password, confirm_password]):
                        error = "Please fill in all required fields"
                    elif not is_valid_email(email):
                        error = "Please enter a valid email address"
                    elif password != confirm_password:
                        error = "Passwords do not match"
                    elif not is_password_strong(password):
                        error = "Password must contain at least 8 characters, letters, numbers, and a special character."
# handles teh message display of Account creating failed. Email exists
                    if error:
                        st.error(error)
                    else:
                        if create_user(email, username, password):
                            st.success("Account created successfully! Please login.")
                            st.session_state.choice = 'Login'
                            st.rerun()
                        else:
                            st.error("Account creation failed. Email already exists!")

                if st.button("Have an account?"):
                    st.session_state.choice = 'Login'
                    st.rerun()

    else:
        if st.sidebar.button("Logout"):
            st.session_state.authenticated = False
            st.session_state.role_id = None
            st.rerun()

if __name__ == "__main__":
    run()
and this is my accounts.py 
when i check the remember me button and login after a while if i refresh the page i am still redirected to the login page. this is not how the session auto login should work right?
so please check and provide soluion if this is a problem



import streamlit as st
import re
import secrets
from datetime import datetime, timedelta, timezone
import extra_streamlit_components as stx
from components import components
from connection import (
    create_connection, create_session_token, get_user_from_session_token, 
    verify_user, create_user, delete_session_token
)

# Helper functions
def is_valid_email(email):
    """Validate the email format using regex"""
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(email_regex, email) is not None

def is_password_strong(password):
    """Check if password meets strength requirements"""
    return (
        len(password) >= 8 and
        any(char.isdigit() for char in password) and
        any(char.isalpha() for char in password) and
        any(char in "!@#$%^&*()-_" for char in password)
    )

# Main function
def run():
    components()
    cookie_manager = stx.CookieManager()  # This initializes the CookieManager

    # Initialize Cookie Manager
    cookie_manager.set('session_token', token, expires_at=expires_at, max_age=30*24*60*60, path='/', same_site='Lax')


    # Retrieve session token from cookies before rendering UI
    session_token = cookie_manager.get('session_token')

    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'role_id' not in st.session_state:
        st.session_state.role_id = None
    if 'choice' not in st.session_state:
        st.session_state.choice = 'Login'

    # Auto-login if session token is valid
# Auto-login if session token is valid
    if session_token and not st.session_state.get("authenticated", False):

        email = get_user_from_session_token(session_token)  # Only call once
        if not email:  # Token expired or invalid
            cookie_manager.delete('session_token')
            session_token = None

        if email:
            try:
                conn = create_connection()
                cursor = conn.cursor()
                cursor.execute("SELECT role_id FROM users WHERE email = %s", (email,))
                user = cursor.fetchone()
                if email and not st.session_state.get("authenticated", False):
                    st.session_state.authenticated = True
                    st.session_state.role_id = user[0]
                    st.rerun()
            except Exception as e:
                st.error(f"Error: {str(e)}")
            finally:
                if conn:
                    conn.close()


    # If not logged in, show login/signup UI
    if not st.session_state.authenticated:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown(f"<h3 style='text-align:center; color:#6A99D5;'>{st.session_state.choice}</h3>", unsafe_allow_html=True)

            if st.session_state.choice == "Login":
                email = st.text_input("Email", placeholder="Enter your email")
                password = st.text_input("Password", type="password", placeholder="Enter your password")
                remember_me = st.checkbox("Remember Me")

                if st.button("Login"):
                    if not email or not password:
                        st.error("Please fill in all required fields")
                    elif not is_valid_email(email):
                        st.error("Please enter a valid email address")
                    else:
                        verification = verify_user(email, password)
                        if verification['status']:
                            st.session_state.authenticated = True
                            st.session_state.role_id = verification['role_id']

                            if remember_me:
                                token = secrets.token_urlsafe(32)
                                expires_at = datetime.now(timezone.utc) + timedelta(days=30)
                                if create_session_token(email, token, expires_at):
                                    cookie_manager.set('session_token', token, expires_at=expires_at, max_age=30*24*60*60, path='/', same_site='Lax')

                            st.rerun()  # Instead of JavaScript reload

                if st.button("Don't have an account?"):
                    st.session_state.choice = 'Sign Up'
                    st.rerun()

            else:  # Signup form
                email = st.text_input("Email", placeholder="Enter your email")
                username = st.text_input("User Name", placeholder="Enter your name")
                password = st.text_input("Password", type='password', placeholder="Create a strong password")
                confirm_password = st.text_input("Confirm Password", type='password', placeholder="Re-enter password")

                if st.button("Create Account"):
                    error = None
                    if not all([email, username, password, confirm_password]):
                        error = "Please fill in all required fields"
                    elif not is_valid_email(email):
                        error = "Please enter a valid email address"
                    elif password != confirm_password:
                        error = "Passwords do not match"
                    elif not is_password_strong(password):
                        error = "Password must contain at least 8 characters, letters, numbers, and a special character."

                    if error:
                        st.error(error)
                    else:
                        if create_user(email, username, password):
                            st.success("Account created successfully! Please login.")
                            st.session_state.choice = 'Login'
                            st.rerun()
                        else:
                            st.error("Account creation failed. Email already exists!")

                if st.button("Have an account?"):
                    st.session_state.choice = 'Login'
                    st.rerun()

    # Logout button in sidebar
    else:
        if st.sidebar.button("Logout"):
            session_token = cookie_manager.get('session_token')
            if session_token:
                delete_session_token(session_token)
                cookie_manager.delete('session_token')
                st.session_state.clear()

            st.rerun()

if __name__ == "__main__":
    run()
dont i already have this?


    if not st.session_state.authenticated:
        col1, col2, col3 = st.columns([1, 2, 1])

        with col2:
            st.markdown("""
                <style>
                    .fancy-header {
                        text-align: center;
                        font-size: 26px;
                        color: #6A99D5FF
                    }
                    div.stButton > button {
                        width: 100%;
                        font-size: 16px;
                        border-radius: 10px;
                        transition: 0.3s ease;
                        background: #6A99D5FF;
                        color: black;
                    }
                    div.stButton > button:hover {
                        background:#CFEBFDFF;
                    }
                    div.stButton > button:active {
                        background:#CFEBFDFF;
                        color: white;
                    }
                    .stTextInput input {
                        background-color: #F5E6E6FF;
                    }
                </style>
            """, unsafe_allow_html=True)

            st.markdown(f"<h3 class='fancy-header'>{st.session_state.choice}</h3>", unsafe_allow_html=True)
